#include <algorithm>
#include <cstring>
#include <filesystem>
#include <fstream>
#include <iostream>
#include <iterator>
#include <libinput.h>
#include <stdlib.h>
#include <string>
#include <vector>

#include <json/forwards.h>
#include <json/reader.h>
#include <json/value.h>
#include <sys/wait.h>

using namespace std;
namespace fs = filesystem;

struct Keymap {
  std::vector<string> keySequence;
  std::string command;
  std::string name;
};

class JsonParser {
public:
  JsonParser(const std::string &configFilePath = "") {
    // Set the member variable 'configFile'
    if (configFilePath.empty()) {
      const char *homeDir = std::getenv("HOME");
      if (homeDir) {
        configFile = fs::path(homeDir) / ".config/catalyst/config.json";
      } else {
        std::cerr << "Error: HOME environment variable not set." << std::endl;
        initializedCorrectly = false;
        return;
      }
    } else {
      configFile = fs::path(configFilePath);
    }

    initializedCorrectly = initializeJson();
  }

  // This is the updated keymaps vector.
  std::vector<Keymap> keymaps;
  bool initializedCorrectly;

private:
  fs::path configFile;

  bool initializeJson() {
    if (!fs::exists(configFile)) {
      std::cerr << "Error: Config file not found at " << configFile.string()
                << std::endl;
      return false;
    }

    std::ifstream file(configFile, std::ifstream::binary);
    if (!file.is_open()) {
      std::cerr << "Error: Could not open file " << configFile.string()
                << std::endl;
      return false;
    }

    Json::Value root;
    Json::CharReaderBuilder builder;
    std::string errs;

    if (!Json::parseFromStream(builder, file, &root, &errs)) {
      std::cerr << "JSON parsing error: " << errs << std::endl;
      return false;
    }

    // Iterate through the keymaps and populate the 'keymaps' vector
    if (root.isObject()) {
      for (Json::Value::const_iterator itr = root.begin(); itr != root.end();
           ++itr) {
        if (itr.name() == "$schema")
          continue; // Skip the schema definition

        const Json::Value &keymapDetails = *itr;
        if (keymapDetails.isObject()) {
          Keymap newKeymap;
          newKeymap.name = itr.name();

          const Json::Value &keySequence = keymapDetails["key-sequence"];
          if (keySequence.isArray()) {
            for (Json::Value::ArrayIndex i = 0; i < keySequence.size(); ++i) {
              newKeymap.keySequence.push_back(keySequence[i].asString());
            }
          }

          const Json::Value &command = keymapDetails["command"];
          if (command.isString()) {
            newKeymap.command = command.asString();
          }

          keymaps.push_back(newKeymap);
        }
      }
    }

    // Check if any keymaps were loaded
    return !keymaps.empty();
  }
};

class FileEditor {
  fs::path configFile;
  string fileContents;
  string catalystStartKey = "# ------- Generated by Catalyst ------- \n\n";
  string catalystEndKey = "# ------ End of code by Catalyst ------ \n";

  bool initializedCorrectly;
  vector<Keymap> keymaps;

  vector<int> getPositionsOfCommas(string line) {
    vector<int> val;

    for (int i = 0; i < line.size(); i++) {
      if (line[i] == ',')
        val.push_back(i);
    }

    return val;
  }

  string formatKeyMap(Keymap km) {

    string line = "bind = , , exec, ";
    string modifiers[] = {"CONTROL", "MAINMOD", "SHIFT", "SUPER"};

    vector<int> commaPos = getPositionsOfCommas(line);
    line.append(km.command); // We always know the command will be last

    for (int i = 0; i < km.keySequence.size(); i++) {
      string key = km.keySequence[i];
      commaPos = getPositionsOfCommas(line);

      if (key == "MAINDMOD")
        key = "$mainMod";

      bool isModifier =
          find(begin(modifiers), end(modifiers), key) != end(modifiers);
      if (isModifier) {
        line.insert(commaPos[0], " " + key);
      } else {
        line.insert(commaPos[1], " " + key);
      }
    }

    cout << "Written line: " << line << endl;
    return line;
  }

  bool writeToConfigFile() {

    fileContents.append(catalystStartKey);

    // Loop through all of the keymaps
    for (int i = 0; i < keymaps.size(); ++i) {

      string line = formatKeyMap(keymaps[i]);
      fileContents.append(line + "\n");
    }

    fileContents.append("\n");
    fileContents.append(catalystEndKey);

    cout << "New file contents: \n" << fileContents << endl;

    ofstream fileOfstream(configFile.string());
    fileOfstream << fileContents;

    return true;
  }

  bool readFile() {
    ifstream f(configFile.string());

    if (!f.is_open()) {
      cerr << "Error opening " << configFile.string() << endl;
      return false;
    }

    string s;
    bool withinGeneratedCode = false;

    // Reads the file but not the lines generated by catalyst
    while (getline(f, s)) {
      if (withinGeneratedCode) {
        if (s + "\n\n" == catalystEndKey) {
          withinGeneratedCode = false;
        }
        continue;
      }

      if (s + "\n\n" == catalystStartKey) {
        withinGeneratedCode = true;
        continue; // Add this line to skip the start key line itself
      }

      fileContents += s + "\n";
    }

    f.close();

    return true;
  }

public:
  FileEditor(vector<Keymap> km) {

    keymaps = km;

    // Set the config file
    const char *homeDir = std::getenv("HOME");
    if (homeDir) {
      configFile = fs::path(homeDir) / ".config/hypr/hyprland.conf";
    } else {
      std::cerr << "Error: Home environment variable not set";
      initializedCorrectly = false;
      return;
    }

    // Open the file
    readFile();
    writeToConfigFile();
  }

  FileEditor(vector<Keymap> km, string keybindsFile) {

    keymaps = km;

    configFile = fs::path(keybindsFile);

    // Open the file
    readFile();
    writeToConfigFile();
  }
};

int main(int argc, char *argv[]) {

  string configFile = "";
  string keybindsFile = "";

  for (int i = 1; i < argc; ++i) {
    if (strcmp(argv[i], "--config") == 0) {
      if (i + 1 < argc) {
        configFile = argv[i + 1];
      } else {
        std::cerr << "Error: --config requires an argument." << endl;
        return 1;
      }
    } else if (strcmp(argv[i], "--keybinds-file") == 0) {
      if (i + 1 < argc) {
        keybindsFile = argv[i + 1];
      } else {
        std::cerr << "Error --keybinds-file requires argument." << endl;
        return 1;
      }
    } else if (strcmp(argv[i], "--help") == 0) {
      cout << "What is catalyst?" << endl;
      cout << "Catalyst is a package which allows you to use JSON to create "
              "keybinds in hyprland \n"
              "Your config file is by default stored in "
              "~/.config/catalyst/config.json \n"
              "Args: "
           << endl
           << endl;
      cout << "catalyst --help:                 Shows this text" << endl;
      cout << "catalyst --config:               Sets your config file" << endl;
      cout
          << "catalyst --keybinds-file:        Sets the file with your keybinds"
          << endl;
      return 0;
    }
  }

  JsonParser *jsonParser = new JsonParser(configFile);

  if (!jsonParser->initializedCorrectly) {
    cout << "Config file not initialized correctly" << endl;
    return 1;
  }

  for (int i = 0; i < jsonParser->keymaps.size(); i++) {
    cout << jsonParser->keymaps[i].command << endl;
  }

  FileEditor *fileEditor;
  if (keybindsFile.empty()) {
    fileEditor = new FileEditor(jsonParser->keymaps);
  } else {
    fileEditor = new FileEditor(jsonParser->keymaps, keybindsFile);
  }

  delete jsonParser;
  delete fileEditor;

  return 0;
}
